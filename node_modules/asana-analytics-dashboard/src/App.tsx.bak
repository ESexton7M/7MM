import React, { useState, useEffect, useCallback } from 'react';

// Import components
import LoadingSpinner from './components/LoadingSpinner';
import ErrorDisplay from './components/ErrorDisplay';
import DashboardView from './components/DashboardView';
import ProjectDurationChart from './components/ProjectDurationChart';
import { GoogleLogin } from './components/GoogleLogin';

// Import types
import type { 
    Task, 
    ProjectData, 
    ProjectDuration,
    SectionDuration,
    SectionCompletionSpan
} from './types';eState, useEffect, useCallback } from 'react';

// Import components
import LoadingSpinner from './components/LoadingSpinner';
import ErrorDisplay from './components/ErrorDisplay';
import DashboardView from './components/DashboardView';
import ProjectDurationChart from './components/ProjectDurationChart';
import { GoogleLogin } from './components/GoogleLogin';

// Import types
import type { 
    Task, 
    ProjectData, 
    ProjectDuration,
    Stats,
    SectionDuration,
    SectionCompletionSpan
} from './types';

interface User {
    email: string;
    name: string;
    picture: string;
}

// Import environment utilities
import { loadEnvConfig } from './utils/env';

const App = (): React.ReactElement => {
    const {
        ASANA_TOKEN: defaultToken,
        ASANA_API_BASE,
        GOOGLE_CLIENT_ID
    } = loadEnvConfig();
    // Load environment configuration
    const envConfig = loadEnvConfig();
    const ASANA_API_BASE = envConfig.ASANA_API_BASE;
    
    // State for authentication and project selection
    const [token] = useState<string>(envConfig.ASANA_TOKEN);
    const [user, setUser] = useState<User | null>(null);
    
    const handleLogin = (userData: User) => {
        setUser(userData);
    };

    // Your existing state declarations
    const [projects, setProjects] = useState<Task[]>([]);
    const [selectedProjectGid, setSelectedProjectGid] = useState<string>('');
    const [projectData, setProjectData] = useState<ProjectData | null>(null);
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string>('');
    const [projectDurations, setProjectDurations] = useState<ProjectDuration[]>([]);
    const [analyzing, setAnalyzing] = useState(false);
    const [analysisError, setAnalysisError] = useState('');
    const [sectionDurations, setSectionDurations] = useState<SectionDuration[]>([]);
    const [incrementalDurations, setIncrementalDurations] = useState<SectionDuration[]>([]);
    const [sectionCompletionSpans, setSectionCompletionSpans] = useState<SectionCompletionSpan[]>([]);
    const [projectSort, setProjectSort] = useState<string>('duration-asc');
    const [searchQuery, setSearchQuery] = useState<string>('');
    const [highlightQuery, setHighlightQuery] = useState<string>('');
    const [highlightedProjects, setHighlightedProjects] = useState<string[]>([]);
    const [dateRange, setDateRange] = useState<{ start: string; end: string }>({
        start: '',
        end: ''
    });
    const [filteredDurations, setFilteredDurations] = useState<typeof projectDurations>([]);

    const handleFetchProjects = useCallback(async () => {
        if (!token) {
            setError('Please enter your Asana Personal Access Token.');
            return;
        }
        setLoading(true);
        setError('');
        setProjects([]);
        setProjectData(null);
        try {
            const response = await fetch(`${ASANA_API_BASE}/projects?opt_fields=name,gid`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (!response.ok) throw new Error(`API Error: ${response.statusText}`);
            const result = await response.json();
            
            // Sort projects alphabetically by name
            const sortedProjects = [...result.data].sort((a, b) => 
                a.name.localeCompare(b.name)
            );
            
            setProjects(sortedProjects);
            if (sortedProjects.length > 0) {
                setSelectedProjectGid(sortedProjects[0].gid);
            } else {
                setError("No projects found in your Asana workspace.");
            }
        } catch (err) {
            if (err instanceof Error) {
                setError(err.message);
            } else {
                setError('Unknown error occurred');
            }
        }
        setLoading(false);
    }, [ASANA_API_BASE, token]);

    // Set default date range on component mount and auto-fetch projects
    useEffect(() => {
        // Default start date to 5 years ago
        const defaultStart = new Date();
        defaultStart.setFullYear(defaultStart.getFullYear() - 5);
        
        // Default end date to future
        const defaultEnd = new Date();
        defaultEnd.setFullYear(defaultEnd.getFullYear() + 1);
        
        setDateRange({
            start: defaultStart.toISOString().split('T')[0],
            end: defaultEnd.toISOString().split('T')[0]
        });

        // Automatically fetch projects if token is available
        if (token) {
            handleFetchProjects();
        }
    }, [token, handleFetchProjects]);

    // Filter and sort projects based on search, date range, and sort criteria
    useEffect(() => {
        if (projectDurations.length > 0) {
            let filtered = [...projectDurations];
            
            // Apply search filter
            if (searchQuery) {
                const query = searchQuery.toLowerCase();
                filtered = filtered.filter(project => 
                    project.name.toLowerCase().includes(query)
                );
            }
            
            // Apply date range filter
            if (dateRange.start || dateRange.end) {
                filtered = filtered.filter(project => {
                    if (!project.created) return false;
                    const projectDate = new Date(project.created);
                    const isAfterStart = !dateRange.start || projectDate >= new Date(dateRange.start);
                    const isBeforeEnd = !dateRange.end || projectDate <= new Date(dateRange.end);
                    return isAfterStart && isBeforeEnd;
                });
            }
            
            setFilteredDurations(filtered);
        }
    }, [projectDurations, searchQuery, dateRange]);

    const analyzeAllProjects = useCallback(async () => {
        if (!token) {
            setAnalysisError('Please enter your Asana Personal Access Token.');
            return;
        }
        setAnalyzing(true);
        setAnalysisError('');
        try {
            // Fetch all tasks for each project
            const allTasksPromises = projects.map((p: Task) =>
                fetch(`${ASANA_API_BASE}/tasks?project=${p.gid}&opt_fields=created_at,completed,completed_at`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                }).then(res => res.json())
            );
            const allTasksResults = await Promise.all(allTasksPromises);
            const durations: { name: string; duration: number; created: string; completed: string }[] = [];

            allTasksResults.forEach((result, idx) => {
                const project = projects[idx];
                if (!result || !Array.isArray(result.data)) {
                    return;
                }
                const completedTasks = result.data.filter((t: Task) => t.completed && t.completed_at && t.created_at);
                if (completedTasks.length > 0) {
                    const creationDates = completedTasks.map((t: Task) => new Date(t.created_at));
                    const completionDates = completedTasks.map((t: Task) => new Date(t.completed_at || ''));
                    const startDate = new Date(Math.min(...creationDates.map((d: Date) => d.getTime())));
                    const endDate = new Date(Math.max(...completionDates.map((d: Date) => d.getTime())));
                    const duration = Math.round((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
                    if (duration > 0) {
                        durations.push({
                            name: project.name,
                            duration,
                            created: startDate.toISOString(),
                            completed: endDate.toISOString(),
                        });
                    }
                }
            });

            // Sort by duration ascending (shortest to longest)
            const sorted = [...durations].sort((a, b) => a.duration - b.duration);
            setProjectDurations(sorted);
        } catch (e) {
            setAnalysisError((e instanceof Error && e.message) ? e.message : 'Analysis failed.');
        }
        setAnalyzing(false);
    }, [ASANA_API_BASE, token, projects]);
    };
    
    return (
        <div className="min-h-screen bg-gray-900 text-gray-200 p-4 sm:p-6 lg:p-8">
            <div className="max-w-7xl mx-auto space-y-8">
                <header className="text-center">
                    <h1 className="text-4xl sm:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-purple-500 mb-2">Asana Project Dashboard</h1>
                    <p className="text-gray-400 text-lg">Visualize your project data and timelines.</p>
                </header>

                {!user ? (
                    <div className="flex flex-col items-center justify-center p-8">
                        <h2 className="text-2xl font-semibold mb-6">Sign in to continue</h2>
                        <GoogleLogin onSuccess={handleLogin} />
                    </div>
                ) : (
                    <div className="space-y-8">
                        <div className="card">
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 items-end">
                                <div className="md:col-span-2">
                                    <label className="block text-sm font-medium text-gray-300 mb-2">Asana Personal Access Token</label>
                                    <input
                                        type="password"
                                        value={token ? token.replace(/./g, '*') : ''}
                                        disabled
                                        className="input-field bg-gray-800 text-gray-400 cursor-not-allowed"
                                        placeholder="Token is securely set."
                                    />
                                </div>
                                <button
                                    onClick={handleFetchProjects}
                                    disabled={loading}
                                    className="btn-primary w-full flex items-center justify-center"
                                >
                                    {loading && !projects.length ? 'Fetching...' : projects.length ? 'Refresh Projects' : 'Fetch Projects'}
                                </button>
                            </div>
                            {error && <ErrorDisplay message={error} />}
                            {loading && !analyzing && <div className="text-center mt-3 text-indigo-300 animate-pulse">Loading projects...</div>}
                            {!loading && analyzing && projects.length > 0 && !projectDurations.length && <div className="text-center mt-3 text-indigo-300 animate-pulse">Auto-analyzing projects...</div>}
                            {projects.length > 0 && (
                                <div className="mt-6">
                                    <label htmlFor="project-select" className="block text-sm font-medium text-gray-300 mb-2">Select a Project</label>
                                    <div className="relative">
                                        <select
                                            id="project-select"
                                            value={selectedProjectGid}
                                            onChange={(e) => setSelectedProjectGid(e.target.value)}
                                            className="select-field bg-gray-800 text-white text-lg border border-indigo-500 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                                            style={{ minWidth: '220px', fontWeight: 600, letterSpacing: '0.02em' }}
                                        >
                                            {projects.map((p: Task) => <option key={p.gid} value={p.gid} className="bg-gray-900 text-white">{p.name}</option>)}
                                        </select>
                                        <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                                            <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/></svg>
                                        </div>
                                    </div>
                                </div>
                            )}
                        </div>
                        {/* Cross-Project Duration Comparison Section */}
                        <div className="card mt-8">
                            <div className="space-y-6">
                                <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
                                    <h2 className="text-2xl font-bold mb-4 sm:mb-0">Compare Project Completion Times</h2>
                                    <button
                                        onClick={analyzeAllProjects}
                                        disabled={analyzing}
                                        className="btn-primary w-full sm:w-auto flex items-center justify-center"
                                    >
                                        {analyzing ? 'Analyzing...' : projectDurations.length > 0 ? 'Re-Analyze Projects' : 'Analyze All Projects'}
                                    </button>
                                </div>
                                {/* Project Search and Filter Controls */}
                                <div className="grid grid-cols-1 gap-y-6">
                                    {/* Search and Filter Controls */}
                                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-x-6 gap-y-6">
                                        {/* Search Projects */}
                                        <div className="w-full">
                                            <label htmlFor="project-search" className="block text-sm font-medium text-gray-300 mb-2">Search Projects</label>
                                            <input
                                                id="project-search"
                                                type="text"
                                                value={searchQuery}
                                                onChange={(e) => setSearchQuery(e.target.value)}
                                                placeholder="Search by project name..."
                                                className="w-full h-10 bg-[#1e1e1e] text-gray-200 rounded-md px-3 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-300"
                                            />
                                        </div>

                                        {/* Date Range */}
                                        <div className="w-full">
                                            <label htmlFor="start-date" className="block text-sm font-medium text-gray-300 mb-2">Date Range</label>
                                            <div className="grid grid-cols-2 gap-x-2">
                                                <input
                                                    id="start-date"
                                                    type="date"
                                                    value={dateRange.start}
                                                    onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                                                    className="w-full h-10 bg-[#1e1e1e] text-gray-200 rounded-md px-3 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-300"
                                                />
                                                <input
                                                    id="end-date"
                                                    type="date"
                                                    value={dateRange.end}
                                                    onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                                                    className="w-full h-10 bg-[#1e1e1e] text-gray-200 rounded-md px-3 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-300"
                                                />
                                            </div>
                                        </div>

                                        {/* Sort */}
                                        <div className="w-full">
                                            <label htmlFor="project-sort" className="block text-sm font-medium text-gray-300 mb-2">Sort Projects By</label>
                                            <select
                                                id="project-sort"
                                                value={projectSort}
                                                onChange={e => setProjectSort(e.target.value)}
                                                className="w-full h-10 bg-[#1e1e1e] text-gray-200 rounded-md px-3 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-300"
                                            >
                                                <option value="duration-asc">Shortest Duration</option>
                                                <option value="duration-desc">Longest Duration</option>
                                                <option value="created-asc">Oldest Creation Date</option>
                                                <option value="created-desc">Newest Creation Date</option>
                                                <option value="completed-asc">Oldest Completion Date</option>
                                                <option value="completed-desc">Newest Completion Date</option>
                                                <option value="alpha-asc">A-Z</option>
                                                <option value="alpha-desc">Z-A</option>
                                            </select>
                                        </div>
                                    </div>

                                    {/* Highlight Projects */}
                                    <div className="w-full">
                                        <label htmlFor="highlight-search" className="block text-sm font-medium text-gray-300 mb-2">
                                            Highlight Projects
                                            <span className="text-gray-400 text-xs ml-2">(comma-separated)</span>
                                        </label>
                                        <input
                                            id="highlight-search"
                                            type="text"
                                            value={highlightQuery}
                                            onChange={(e) => setHighlightQuery(e.target.value)}
                                            placeholder="Project1, Project2, Project3..."
                                            className="w-full h-10 bg-[#1e1e1e] text-gray-200 rounded-md px-3 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-300"
                                        />
                                    </div>
                                </div>

                                {filteredDurations.length > 0 ? (
                                    <div className="mt-8">
                                        <ProjectDurationChart 
                                            durations={filteredDurations}
                                            highlightedProjects={highlightedProjects}
                                        />
                                    </div>
                                ) : (
                                    <p className="text-center text-gray-400 mt-8">No projects found matching your criteria.</p>
                                )}
                            </div>
                        </div>
                        {(loading || analyzing) && (
                            <div className="fixed inset-0 z-50 flex items-center justify-center" style={{ background: 'rgba(0,0,0,0.18)' }}>
                                <div className="flex flex-col items-center">
                                    <LoadingSpinner />
                                    <span className="mt-4 text-lg text-gray-200 font-semibold animate-pulse">
                                        {analyzing ? 'Analyzing data...' : 'Loading...'}
                                    </span>
                                </div>
                            </div>
                        )}
                        {!loading && !analyzing && projectData && <DashboardView projectData={projectData} />}
                    </div>
                )}
            </div>
        </div>
    );
};

export default App;